
@model guestACCESS.Kernel.CarRental.CarRentalModels
    @{ 
        var currentDate = DateTime.Now;
    }
<style>

.modal-content, .modal-footer{
    border: none!important;
}

#activity-select #EventType, #activity-select label, #tripListAcitivity label, #create-trip label, #tripListFlyUs label, #pd-select label, #pd-info label, #activity-create label, #hotel-create label, #tripListHotel label, #EventTypeCatalog{
    color: #000!important;
}

.select2-container--default .select2-selection--single,
#EventTypeCatalog{
    border: 1px solid #ced4da!important;
}
.check-box label, .form-group label,
.form-search .form-field label{
    font-size: 17px!important;
}

.select2-container .select2-selection--single{
    height: 38px;
}

</style>

@using (Html.BeginForm("CarRental", "EventTariff", new { area = "AdminDomain" }, FormMethod.Post, new { id = "CarRentalForm", @class = "form-horizontal" }))
{
    <div class="modal-content">       
        <div class="modal-body">
            <div class="row">
                <div class="col-md-12 col-xs-12">
                    <div class="box box-primary box-solid">
                        <div class="">
                            <div class="row">
                                <div class="form-group col-md-4 col-xs-4">
                                    <label>Pick-Up Location</label>
                                    @*@Html.DropDownListFor(t => t.PickUpLocation, null, new { @class = "form-control select2", @style= "width: 100%;"})*@
                                    <select name="PickUpLocation" id="PickUpLocation" class="form-control select2" style="width: 100%;"></select>
                                    @Html.CheckBox("IsDropLocationDifferent",false)
                                    <label for="IsDropLocationDifferent">Drop at Different Location?</label>
                                        <span class="text-danger" id="mobSpan" style="display: none">
                                        Note: If return locations differ from pickup, return locations are limited to airport locations ONLY.
                                    </span>
                                </div>
                                <div class="form-group col-md-4 col-xs-4">
                                    <label>Pick-Up Date</label>
                                    @* @Html.TextBoxFor(t => t.PickUpDate, new { @class = "form-control input-sm datepicker", @placeholder = "mm/dd/yyyy" })*@
                                    @Html.TextBox("PickUpDate",null, "{0:" + SharedLib.Misc.DateTimeFormatter.DefaultStyle + "}", new { @class = "form-control", autocomplete = "off", min = SharedLib.Misc.DateTimeFormatter.ConvertToString(currentDate, "", SharedLib.Misc.DateTimeFormatter.Style9), type = "date" })
                                </div>
                                <div class="form-group col-md-4 col-xs-4">
                                    <label>Pick-Up Time</label>
                                    @Html.TextBoxFor(t => t.PickUpTime, new { @class = "form-control input-sm",@type="time" })
                                </div>
                                <div class="form-group col-md-12 col-xs-12">
                                    <span class="text-danger" id="desSpan" style="display: inline-block">
                                        Note: If return locations differ from pickup, return locations are limited to airport locations ONLY.
                                    </span>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4 col-xs-4" id="dropDiv">
                                    <label>Drop-Off Location</label>
                                    <select name="DropOffLocation" id="DropOffLocation" class="form-control" style="width: 100%;"></select>
                                    @*@Html.DropDownListFor(t => t.DropOffLocation, null, new { @class = "form-control select2", @style = "width: 100%;" })*@
                                </div>
                                <div class="form-group col-md-4 col-xs-4">
                                    <label>Drop-Up Date</label>
                                    @Html.TextBox("DropOffDate", null, "{0:" + SharedLib.Misc.DateTimeFormatter.DefaultStyle + "}", new { @class = "form-control", autocomplete = "off", min = SharedLib.Misc.DateTimeFormatter.ConvertToString(currentDate, "", SharedLib.Misc.DateTimeFormatter.Style9), type = "date" })
                                </div>
                                <div class="form-group col-md-4 col-xs-4">
                                    <label>Drop-Off Time</label>
                                    @Html.TextBoxFor(t => t.DropOffTime, new { @class = "form-control input-sm", @type = "time" })
                                </div>
                                @*<div class="form-group col-md-4 col-xs-4">
                                        <label>Residency</label>
                                        @Html.DropDownListFor(t => t.Residency, (IEnumerable<SelectListItem>)ViewData["CountryCode"], new { @class = "form-control select2", @style = "width: 100%;" })
                                    </div>*@
                            </div>
                            @*<div class="row">
                                    <div class="form-group col-md-4 col-xs-4">
                                        <label>Driver's Age</label>
                                        @Html.TextBoxFor(t => t.DriverAge, new { @class = "form-control input-sm" })
                                    </div>
                                </div>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
            @{ 
                var currentTicket = SharedLib.Authenticator.MemberTicketManager.Instance.CurrentUserTicket;
            }
        <div class="text-center">
            @Html.HiddenFor(t => t.TripId)
            @Html.HiddenFor(t => t.ReturnUrl)
            @Html.Hidden("UId", currentTicket==null?0:currentTicket.UserId)
            <button type="submit" class="awe-btn awe-btn-1 awe-btn-small">Search</button>
        </div>
    </div>

}

<script>

    var spanWidth = innerWidth;
    var spanIdleWidth = "767";
    if (spanWidth < spanIdleWidth){
        document.getElementById('desSpan').style.display = "none";
        document.getElementById('mobSpan').style.display = "inline-block";
       }

</script>


